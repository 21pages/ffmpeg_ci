name: ffmpeg

on:
  workflow_dispatch:
  # push:
  # pull_request:

env:
  TAG_NAME: "dev"
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true # https://github.com/actions/checkout/issues/1590#issuecomment-2208181786

permissions:
  contents: write

jobs:
  build-for-wasm:
    if: true
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-20.04, arch: x86_64}      
    steps:
  
      - uses: actions/checkout@v2
  
      - name: tools
        run: |
          sudo apt-get -y update
          sudo apt-get -y install build-essential yasm pkg-config git zip
      
      - name: wasm sdk
        run: |
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/wasi-sdk-24.0-x86_64-linux.tar.gz
          tar -xvf wasi-sdk-24.0-x86_64-linux.tar.gz
          rm wasi-sdk-24.0-x86_64-linux.tar.gz
          sudo mv wasi-sdk-24.0-x86_64-linux /opt/wasi-sdk
  
      - name: binaryen
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_118/binaryen-version_118-x86_64-linux.tar.gz
          tar -xvf binaryen-version_118-x86_64-linux.tar.gz
          rm binaryen-version_118-x86_64-linux.tar.gz
          sudo mv binaryen-version_118 /opt/binaryen
      
      - name: Source FFmpeg
        run: |
          git clone --depth=1 -b n7.0.2 https://github.com/FFmpeg/FFmpeg.git
          mkdir includes
          mkdir libs
          mkdir release
          ls -al
        
      - name: Configure
        working-directory: ${{github.workspace}}/FFmpeg
        run: |
          set -euox pipefail

          FFMPEG_CONFIG_FLAGS_BASE=(
            --target-os=none        # use none to prevent any os specific configurations
            --arch=x86_32           # use x86_32 to achieve minimal architectural optimization
            --enable-cross-compile  # enable cross compile
            --disable-inline-asm
            --disable-x86asm        # disable x86 asm
            --disable-inline-asm    # disable inline asm
            --disable-stripping     # disable stripping
            --disable-doc           # disable doc
            --disable-debug         # disable debug info, required by closure
            --disable-runtime-cpudetect   # disable runtime cpu detect
            --disable-autodetect    # disable external libraries auto detect
            --disable-network       # https://github.com/WebAssembly/wasi-sdk/issues/112
            --disable-pthreads
            --disable-w32threads
            --disable-os2threads
            --pkg-config-flags="--static"
            --enable-lto            # use link-time optimization

            --disable-everything
            --disable-programs
            --disable-htmlpages
            --disable-manpages
            --disable-podpages
            --disable-txtpages
            --disable-network
            --disable-appkit
            --disable-coreimage
            --disable-metal
            --disable-sdl2
            --disable-securetransport
            --disable-vulkan
            --disable-audiotoolbox
            --disable-v4l2-m2m
            --disable-valgrind-backtrace
            --disable-large-tests
            
            --disable-avdevice
            --disable-avformat
            --disable-avfilter
            --disable-swresample
            --disable-swscale
            --disable-postproc
            --enable-avcodec
            --enable-decoder=h264
            --enable-decoder=hevc
            --enable-decoder=vp8
            --enable-decoder=vp9
            --enable-decoder=av1

            --nm=opt/wasi-sdk/bin/nm
            --ar=opt/wasi-sdk/bin/ar
            --ranlib=opt/wasi-sdk/bin/ranlib
            --cc=opt/wasi-sdk/bin/clang
            --cxx=opt/wasi-sdk/bin/clang++
            --objcc=opt/wasi-sdk/bin/clang
            --dep-cc=opt/wasi-sdk/bin/clang

            --prefix=../release

          )

          ./configure  \
          ${FFMPEG_CONFIG_FLAGS_BASE[@]} \
          | tee ../release/configure.log
  
      - name: Build
        working-directory: FFmpeg
        run: |
          make -n |
            # Add cflags that ./configure does not accept
            sed 's/clang /clang -D_WASI_EMULATED_PROCESS_CLOCKS -lwasi-emulated-process-clocks /g' |
            sed 's/clang /clang -D_WASI_EMULATED_SIGNAL -lwasi-emulated-signal /g' |
            sed 's/clang /clang -msimd128 /g' |
            cat > ../build/compile.sh
          chmod +x ../build/compile.sh
          sed -i 's,tempnam,NULL; //tempnam,g' ./libavutil/file_open.c
          ../build/compile.sh
          ls release
      
      - name: Create Archive
        uses: thedoctor0/zip-release@0.7.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          type: 'zip'
          filename: 'ffmpeg_linux_${{ matrix.job.arch }}.zip'
          path: 'release'
      
      - name: Publish
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: | 
            ./ffmpeg_linux_${{ matrix.job.arch }}.zip
  
 